stages:
  - unittest
  - build
  - qa
  - release

# Don't run for new tags
workflow:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

.test_only:
  rules:
    - changes:
      - "*.py"
      - "libpinger/*.py"
      - "tests/*.py"

.build_only:
  rules:
    - changes:
        - "*.py"
        - "libpinger/*.py"
        - "Dockerfile*"
        - .gitlab-ci.yml

.docker:
  image: docker:stable
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_CERT_PATH: "/certs/client"
    DOCKER_CLI_EXPERIMENTAL: enabled
  tags:
    - docker
    - shared
  before_script:
    - export VERSION=$(grep -i  version libpinger/version.py | awk '{ print $3 }' | tr -d \');
    - if [[ $CI_COMMIT_BRANCH == "master" ]]; then
        export TAG=$VERSION;
      else
        export TAG="dev";
      fi
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
    - export CI_PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr "[:upper:]" "[:lower:]")

.docker_arm:
  extends: .docker
  tags:
    - docker
    - arm
    - rpi

flake8:
  stage: unittest
  extends: .test_only
  image: python:3.7
  before_script:
    - pip install pipenv
    - pipenv install --dev
  script:
    - pipenv run flake8 --max-line-length 120 *.py metric/*.py

pytest:
  stage: unittest
  extends: .test_only
  image: python:3.7
  before_script:
    - pip install pipenv
    - pipenv install --dev
  script:
    - pipenv check
    - cd tests && pipenv run pytest --cov --junitxml=report.xml
    - pipenv run bash <(curl -s https://codecov.io/bash) -s tests
  artifacts:
    reports:
      junit: tests/report.xml

build_amd64:
  stage: build
  extends:
    - .docker
    - .build_only
  script:
    - docker pull "$CI_PROJECT_PATH":"$TAG-amd64" || true
    - docker build --cache-from "$CI_PROJECT_PATH":"$TAG-amd64" --pull -t "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-amd64" .
    - docker push "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-amd64"

build_arm:
  stage: build
  extends:
    - .docker
    - .build_only
  script:
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - docker pull "$CI_PROJECT_PATH":"$TAG-arm" || true
    - docker build --cache-from "$CI_PROJECT_PATH":"$TAG-arm" --pull -t "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-arm" --file Dockerfile.qemu .
    - docker push "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-arm"

smoke_amd64:
  stage: qa
  extends:
    - .docker
    - .build_only
  script:
    - apk add --update curl
    - docker run -p 8080:8080 --name pinger --rm -d "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-amd64" --debug localhost --interval 2
    - sleep 2
    - curl -s docker:8080/metric | grep '^pinger_latency{host="localhost"}'
    - curl -s docker:8080/metric | grep '^pinger_packet_loss{host="localhost"}'
    - docker stop pinger

smoke_arm:
  stage: qa
  extends:
    - .docker_arm
    - .build_only
  script:
    - apk add --update curl
    - docker run -p 8080:8080 --name pinger --rm -d "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-arm" --debug localhost --interval 2
    - sleep 2
    - curl -s docker:8080/metric | grep '^pinger_latency{host="localhost"}'
    - curl -s docker:8080/metric | grep '^pinger_packet_loss{host="localhost"}'
    - docker stop pinger

publish:
  stage: release
  extends:
    - .docker
    - .build_only
  script:
    - docker tag $CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-amd64" "$CI_PROJECT_PATH":$TAG-amd64
    - docker tag $CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-arm" "$CI_PROJECT_PATH":$TAG-arm
    - docker manifest create "$CI_PROJECT_PATH":"$TAG" "$CI_PROJECT_PATH":"$TAG-amd64" "$CI_PROJECT_PATH":"$TAG-arm"
    - docker manifest push -p "$CI_PROJECT_PATH":"$TAG"
    - if [[ "$CI_COMMIT_BRANCH" == "master" ]; then
        docker manifest create "$CI_PROJECT_PATH":latest "$CI_PROJECT_PATH":"$TAG-amd64" "$CI_PROJECT_PATH":"$TAG-arm"
        docker manifest push -p "$CI_PROJECT_PATH":latest
      fi
    - docker rmi "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-amd64"
    - docker rmi "$CI_PROJECT_PATH":"$CI_COMMIT_SHORT_SHA-amd"

github:
  stage: release
  extends:
    - .build_only
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  before_script:
    - export VERSION=$(grep -i ^version libpinger/version.py | awk '{ print $3 }' | tr -d \');
  script:
    - git remote set-url origin "https://$GITHUB_USER:$GITHUB_TOKEN@github.com/$CI_PROJECT_PATH.git"
    - git tag $VERSION
    - git push --tags
